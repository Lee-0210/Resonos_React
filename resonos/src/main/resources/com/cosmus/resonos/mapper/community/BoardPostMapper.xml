<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cosmus.resonos.mapper.community.BoardPostMapper">

  <resultMap id="BoardPostResultMap" type="com.cosmus.resonos.domain.community.BoardPost">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    <result property="content" column="content"/>
    <result property="type" column="type"/>
    <result property="createdAt" column="created_at"/>
    <result property="communityId" column="community_id"/>
    <result property="userId" column="user_id"/>
    <result property="views" column="views"/>
    <result property="trackId" column="track_id"/>
    <result property="thumbnailUrl" column="thumbnail_url"/>
    <result property="userNickname" column="user_nickname"/>
    <result property="postLikes" column="post_likes"/>
    <result property="postDislikes" column="post_dislikes"/>
    <result property="commentCount" column="comment_count"/>
    <result property="guestNickname" column="guest_nickname"/>
    <result property="guestPassword" column="guest_password"/>
    <result property="userLiked" column="user_liked"/>
    <result property="userDisliked" column="user_disliked"/>

    <association property="community" javaType="com.cosmus.resonos.domain.community.Community">
        <id property="id" column="community_id"/>
        <result property="name" column="community_name"/>
        <result property="categoryId" column="category_id"/>
    </association>

  </resultMap>

  <select id="list" resultMap="BoardPostResultMap">
    SELECT * FROM board_post ORDER BY created_at DESC
  </select>

  <select id="select" resultMap="BoardPostResultMap">
    SELECT bp.*, u.nickname AS user_nickname
    FROM board_post bp
    LEFT JOIN user u ON bp.user_id = u.id
    WHERE bp.id = #{id}
  </select>

  <insert id="insert" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO board_post (title, content, type, community_id, user_id, guest_nickname, guest_password)
    VALUES (#{title}, #{content}, #{type}, #{communityId}, #{userId}, #{guestNickname}, #{guestPassword})
  </insert>

  <update id="update">
    UPDATE board_post
    <set>
      <if test="title != null">title = #{title},</if>
      <if test="content != null">content = #{content},</if>
    </set>
    WHERE id = #{id}
  </update>

  <delete id="delete">
    DELETE FROM board_post
    WHERE id = #{id}
  </delete>

  <select id="findByCommunity" resultMap="BoardPostResultMap">
    SELECT * FROM board_post WHERE community_id = #{communityId} ORDER BY created_at DESC
  </select>

  <select id="countAll" resultType="int">
    SELECT COUNT(*) FROM board_post
  </select>

  <select id="countByUserId" resultType="int">
    SELECT COUNT(*) FROM board_post WHERE user_id = #{userId}
  </select>

  <select id="selectWithLikesDislikes" resultMap="BoardPostResultMap">
    SELECT
      bp.*,
      u.nickname AS user_nickname,
      (SELECT COUNT(*)
        FROM likes_dislikes ld
        WHERE ld.type = 'post'
          AND ld.target_id = bp.id
          AND ld.is_likes = 1
      ) AS post_likes,
      (SELECT COUNT(*)
        FROM likes_dislikes ld
        WHERE ld.type = 'post'
          AND ld.target_id = bp.id
          AND ld.is_likes = 0
      ) AS post_dislikes,
      (SELECT COUNT(*)
        FROM comment c
        WHERE c.board_post_id = bp.id
      ) AS comment_count,
      -- 로그인한 유저가 좋아요 눌렀는지 여부 (1 or 0)
      (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM likes_dislikes ld
        WHERE ld.type = 'post'
          AND ld.target_id = bp.id
          AND ld.is_likes = 1
          AND ld.user_id = #{userId}
      ) AS user_liked,
      -- 로그인한 유저가 싫어요 눌렀는지 여부 (1 or 0)
      (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM likes_dislikes ld
        WHERE ld.type = 'post'
          AND ld.target_id = bp.id
          AND ld.is_likes = 0
          AND ld.user_id = #{userId}
      ) AS user_disliked
    FROM board_post bp
    LEFT JOIN user u ON u.id = bp.user_id
    WHERE bp.id = #{postId}
      AND bp.community_id = #{communityId}
  </select>

  <update id="incrementViewCount">
    UPDATE board_post
    SET views = views + 1
    WHERE id = #{id}
  </update>

  <!-- 커뮤 메인 -->
<!-- Hot Posts (조회수 기준) -->
<select id="selectHotPosts" resultMap="BoardPostResultMap">
  SELECT bp.*,
         c.name AS community_name,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
         (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count
  FROM board_post bp
  LEFT JOIN community c ON bp.community_id = c.id
  ORDER BY bp.views DESC
  LIMIT #{limit}
</select>

<!-- 전체 게시글 -->
<select id="selectAll" resultMap="BoardPostResultMap">
  SELECT bp.*,
         c.name AS community_name,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
         (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count
  FROM board_post bp
  LEFT JOIN community c ON bp.community_id = c.id
  ORDER BY bp.created_at DESC
</select>

<!-- 인기 게시글 -->
<select id="selectPopularPosts" resultMap="BoardPostResultMap">
  SELECT bp.*,
         c.name AS community_name,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
         (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count
  FROM board_post bp
  LEFT JOIN community c ON bp.community_id = c.id
  ORDER BY bp.views DESC, bp.created_at DESC
</select>

<!-- 실시간 인기 게시글 (72시간 기준) -->
<select id="selectRealTimePopularPosts" resultMap="BoardPostResultMap">
  SELECT bp.*,
         c.name AS community_name,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
         (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count
  FROM board_post bp
  LEFT JOIN community c ON bp.community_id = c.id
  WHERE bp.created_at >= NOW() - INTERVAL 72 HOUR
  ORDER BY bp.views DESC, bp.created_at DESC
</select>

<!-- 검색 게시글 -->
<select id="searchPosts" resultMap="BoardPostResultMap">
  SELECT bp.*,
         c.name AS community_name,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
         (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count,
         u.nickname AS user_nickname
  FROM board_post bp
  LEFT JOIN community c ON bp.community_id = c.id
  LEFT JOIN user AS u ON u.id = bp.user_id
  <where>
    <if test="query != null and query.trim() != ''">
      (bp.title LIKE CONCAT('%', #{query}, '%')
       OR bp.content LIKE CONCAT('%', #{query}, '%'))
    </if>
  </where>
  ORDER BY bp.created_at DESC
</select>

<!-- 카테고리별 게시글 -->
<select id="selectByCategoryId" resultMap="BoardPostResultMap">
  SELECT bp.*,
         c.category_id AS categoryId,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
         (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count
  FROM board_post bp
  LEFT JOIN community c ON bp.community_id = c.id
  WHERE c.id = #{categoryId}
  ORDER BY bp.created_at DESC
</select>

<!-- 공지 게시글 -->
<select id="selectNoticesByCategoryId" resultMap="BoardPostResultMap">
  SELECT bp.*,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
         (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count
  FROM board_post bp
  INNER JOIN user u ON bp.user_id = u.id
  INNER JOIN user_auth ua ON ua.username = u.username
  INNER JOIN community c ON bp.community_id = c.id
  WHERE ua.auth = 'ROLE_ADMIN'
    AND c.category_id = #{categoryId}
  ORDER BY bp.created_at DESC
  LIMIT #{limit}
</select>


  <!-- 게시판 대표 음악 설정 -->
  <update id="setTrack">
    UPDATE board_post
    SET track_id = #{trackId}
    WHERE id = #{postId}
  </update>

  <!-- 게시판 테이블 thumbnail_url 컬럼 추가 -->
  <update id="setThumbnailUrl">
    UPDATE board_post
    SET thumbnail_url = #{thumbnailUrl}
    WHERE id = #{postId}
  </update>

  <!-- 댓글 수 -->
  <select id="getCommentCount" resultType="int">
    SELECT COUNT(*)
    FROM comment
    WHERE board_post_id = #{postId}
  </select>

  <select id="listByCommunityId" resultMap="BoardPostResultMap">

    SELECT bp.*,
      c.name AS community_name,
      (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
      (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
      (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count
    FROM board_post bp
      LEFT JOIN community c ON bp.community_id = c.id
    WHERE bp.community_id = #{communityId}
    AND (bp.user_id IS NULL OR bp.user_id != c.creator_id)

    ORDER BY bp.created_at DESC
  </select>

<select id="getNoticesByCommunityId" resultMap="BoardPostResultMap">

  SELECT bp.*,
    c.name AS community_name,
    (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
    (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
    (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count
  FROM board_post bp
	  INNER JOIN community c ON bp.community_id = c.id
  WHERE c.creator_id = bp.user_id
    AND bp.community_id = #{communityId}
  ORDER BY bp.created_at DESC
</select>


<!-- 모든 게시글 가져오기 -->
<select id="getAllPosts" resultMap="BoardPostResultMap">
  SELECT bp.*,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=1) AS post_likes,
         (SELECT COUNT(*) FROM likes_dislikes ld WHERE ld.type='post' AND ld.target_id=bp.id AND ld.is_likes=0) AS post_dislikes,
         (SELECT COUNT(*) FROM comment cm WHERE cm.board_post_id=bp.id) AS comment_count
  FROM board_post bp
</select>


<!-- vote  -->
<!-- 게시글 투표 목록 -->
<select id="findVotesByPostId" parameterType="long" resultType="com.cosmus.resonos.domain.community.ComVote">
  SELECT id, post_id, title, is_completed
  FROM com_vote
  WHERE post_id = #{postId}
  ORDER BY created_at DESC
</select>

<!-- 투표 선택지 목록 -->
<select id="findArgumentsByVoteId" parameterType="long" resultType="com.cosmus.resonos.domain.community.ComVoteArgument">
  SELECT id, vote_id, content
  FROM com_vote_argument
  WHERE vote_id = #{voteId}
</select>

<!-- 선택지별 투표 수 계산 -->
<select id="countVoteResults" parameterType="long" resultType="int">
  SELECT COALESCE(SUM(count), 0)
  FROM vote_result
  WHERE arg_id = #{argId}
</select>

<!-- 투표 저장  -->
<insert id="insertVoteResult" resultType="int">
  INSERT INTO vote_result (vote_id, arg_id, user_id, guest_id, count, created_at)
  VALUES (#{voteId}, #{argId}, #{userId}, #{guestId}, #{count}, #{createdAt})
</insert>

<!-- 투표 이력 확인 -->
<select id="checkUserVoteExists" resultType="int">
  SELECT COUNT(*)
  FROM vote_result
  WHERE arg_id = #{argId}
    AND ((user_id IS NOT NULL AND user_id = #{userId})
         OR (guest_id IS NOT NULL AND guest_id = #{guestId}))
</select>

<!-- 투표 결과 삭제 -->
<delete id="deleteVoteResult" parameterType="long">
    DELETE FROM vote_result
    WHERE arg_id = #{argId}
</delete>



<!-- 키워드 기본 검색을 위한 - 커뮤니티 ID 목록에 해당하는 게시글 조회 -->
<select id="getPostsByCommunityIds" resultMap="BoardPostResultMap">
  SELECT bp.*, u.nickname AS user_nickname
  FROM board_post bp
  LEFT JOIN user u ON u.id = bp.user_id
  WHERE bp.community_id IN
  <foreach collection="list" item="communityId" open="(" separator="," close=")">
    #{communityId}
  </foreach>
  ORDER BY bp.created_at DESC
</select>


<!-- 모든 커뮤니티 + 키워드 + 커뮤니티별 작성된 boardPost count -->
<select id="countPostsByCommunityIds" resultType="map">
  SELECT
    c.id AS community_id,
    COUNT(bp.id) AS board_post_count
  FROM community c
  LEFT JOIN board_post bp ON bp.community_id = c.id
  WHERE c.id IN
  <foreach item="id" collection="list" open="(" separator="," close=")">
    #{id}
  </foreach>
  GROUP BY c.id
</select>


</mapper>
