<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cosmus.resonos.mapper.community.BoardPostMapper">

  <resultMap id="BoardPostResultMap" type="com.cosmus.resonos.domain.community.BoardPost">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    <result property="content" column="content"/>
    <result property="type" column="type"/>
    <result property="createdAt" column="created_at"/>
    <result property="communityId" column="community_id"/>
    <result property="userId" column="user_id"/>
    <result property="views" column="views"/>
    <result property="trackId" column="track_id"/>
    <result property="thumbnailUrl" column="thumbnail_url"/>
    <result property="userNickname" column="user_nickname"/>
    <result property="postLikes" column="post_likes"/>
    <result property="postDislikes" column="post_dislikes"/>
    <result property="commentCount" column="comment_count"/>

    <association property="community" javaType="com.cosmus.resonos.domain.community.Community">
        <id property="id" column="community_id"/>
        <result property="name" column="community_name"/>
        <result property="categoryId" column="category_id"/>
    </association>

  </resultMap>

  <select id="list" resultMap="BoardPostResultMap">
    SELECT * FROM board_post ORDER BY created_at DESC
  </select>

  <select id="select" resultMap="BoardPostResultMap">
    SELECT *
    FROM board_post
    WHERE id = #{id}
  </select>

  <insert id="insert">
    INSERT INTO board_post (title, content, type, created_at, community_id, user_id, views)
    VALUES (#{title}, #{content}, #{type}, #{createdAt}, #{communityId}, #{userId}, #{views})
  </insert>

  <update id="update">
    UPDATE board_post
    SET title = #{title},
        content = #{content},
        type = #{type},
        community_id = #{communityId},
        user_id = #{userId},
        views = #{views}
    WHERE id = #{id}
  </update>

  <delete id="delete">
    DELETE FROM board_post WHERE id = #{id}
  </delete>

  <select id="findByCommunity" resultMap="BoardPostResultMap">
    SELECT * FROM board_post WHERE community_id = #{communityId} ORDER BY created_at DESC
  </select>

  <select id="countAll" resultType="int">
    SELECT COUNT(*) FROM report
  </select>

  <select id="countByUserId" resultType="int">
    SELECT COUNT(*) FROM board_post WHERE user_id = #{userId}
  </select>

  <select id="selectWithLikesDislikes" resultMap="BoardPostResultMap">
    SELECT
      bp.*,
      u.nickname AS user_nickname,
      (SELECT COUNT(*)
        FROM likes_dislikes ld
        WHERE ld.type = 'post'
          AND ld.target_id = bp.id
          AND ld.is_likes = 1)
      AS post_likes,
      (SELECT COUNT(*)
        FROM likes_dislikes ld
        WHERE ld.type = 'post'
          AND ld.target_id = bp.id
          AND ld.is_likes = 0)
      AS post_dislikes
    FROM board_post bp
    LEFT JOIN user AS u ON u.id = bp.user_id
    WHERE bp.id = #{postId}
      AND bp.community_id = #{communityId}
  </select>

  <!-- 커뮤 메인 -->
  <!-- Hot Posts (조회수 기준) -->
  <select id="selectHotPosts" resultMap="BoardPostResultMap">
    SELECT bp.*,
          c.name AS community_name,
          (SELECT COUNT(*) 
            FROM comment cm
            WHERE cm.board_post_id = bp.id) AS comment_count
    FROM board_post bp
    LEFT JOIN community c ON bp.community_id = c.id
    ORDER BY bp.views DESC
    LIMIT #{limit}
  </select>

  <!-- 전체 게시글 -->
  <select id="selectAll" resultMap="BoardPostResultMap">
    SELECT bp.*,
          c.name AS community_name,
          (SELECT COUNT(*) 
            FROM comment cm
            WHERE cm.board_post_id = bp.id) AS comment_count
    FROM board_post bp
    LEFT JOIN community c ON bp.community_id = c.id
    ORDER BY bp.created_at DESC
  </select>

  <!-- 인기 게시글 -->
  <select id="selectPopularPosts" resultMap="BoardPostResultMap">
    SELECT bp.*,
          c.name AS community_name,
          (SELECT COUNT(*) 
            FROM comment cm
            WHERE cm.board_post_id = bp.id) AS comment_count
    FROM board_post bp
    LEFT JOIN community c ON bp.community_id = c.id
    ORDER BY bp.views DESC, bp.created_at DESC
  </select>

  <!-- 실시간 인기 게시글 (72시간 기준) -->
  <select id="selectRealTimePopularPosts" resultMap="BoardPostResultMap">
    SELECT bp.*,
          c.name AS community_name,
          (SELECT COUNT(*) 
            FROM comment cm
            WHERE cm.board_post_id = bp.id) AS comment_count
    FROM board_post bp
    LEFT JOIN community c ON bp.community_id = c.id
    WHERE bp.created_at >= NOW() - INTERVAL 72 HOUR
    ORDER BY bp.views DESC, bp.created_at DESC
  </select>

  <!-- 검색 게시글 -->
  <select id="searchPosts" resultMap="BoardPostResultMap" parameterType="string">
    SELECT bp.*,
          c.name AS community_name,
          (SELECT COUNT(*) 
            FROM comment cm
            WHERE cm.board_post_id = bp.id) AS comment_count
    FROM board_post bp
    LEFT JOIN community c ON bp.community_id = c.id
    <where>
      <if test="query != null and query.trim() != ''">
        (bp.title LIKE CONCAT('%', #{query}, '%')
        OR bp.content LIKE CONCAT('%', #{query}, '%'))
      </if>
    </where>
    ORDER BY bp.created_at DESC
  </select>

  <!-- 카테고리별 게시글 -->
  <select id="selectByCategoryId" resultMap="BoardPostResultMap">
    SELECT bp.*,
          c.category_id AS categoryId,
          (SELECT COUNT(*) 
            FROM comment cm
            WHERE cm.board_post_id = bp.id) AS comment_count
    FROM board_post bp
    LEFT JOIN community c ON bp.community_id = c.id
    WHERE c.id = #{categoryId}
    ORDER BY bp.created_at DESC
  </select>

  <!-- 공지 게시글 -->
  <select id="selectNoticesByCategoryId" resultMap="BoardPostResultMap">
    SELECT bp.*,
          (SELECT COUNT(*) 
            FROM comment cm
            WHERE cm.board_post_id = bp.id) AS comment_count
    FROM board_post bp
    INNER JOIN user u ON bp.user_id = u.id
    INNER JOIN user_auth ua ON ua.username = u.username
    INNER JOIN community c ON bp.community_id = c.id
    WHERE ua.auth = 'ROLE_ADMIN'
      AND c.category_id = #{categoryId}
    ORDER BY bp.created_at DESC
    LIMIT #{limit}
  </select>


  <!-- 게시판 대표 음악 설정 -->
  <update id="setTrack">
    UPDATE board_post
    SET track_id = #{trackId}
    WHERE id = #{postId}
  </update>

  <!-- 게시판 테이블 thumbnail_url 컬럼 추가 -->
  <update id="setThumbnailUrl">
    UPDATE board_post
    SET thumbnail_url = #{thumbnailUrl}
    WHERE id = #{postId}
  </update>

  <!-- 댓글 수 -->
  <select id="getCommentCount" resultType="int">
    SELECT COUNT(*)
    FROM comment
    WHERE board_post_id = #{postId}
  </select>

  <!-- // listByCommunityId-->
  <select id="listByCommunityId" resultMap="BoardPostResultMap">
    SELECT bp.*     
    FROM board_post bp
    LEFT JOIN community c ON bp.community_id = c.id
    WHERE bp.community_id = #{communityId}
      ORDER BY bp.created_at DESC
  </select>


<!-- // getNoticesByCommunityId  -->
  <select id="getNoticesByCommunityId" resultMap="BoardPostResultMap">
    SELECT bp.*,
          (SELECT COUNT(*) 
            FROM comment cm
            WHERE cm.board_post_id = bp.id) AS comment_count
    FROM board_post bp
    INNER JOIN user u ON bp.user_id = u.id
    INNER JOIN user_auth ua ON ua.username = u.username
    WHERE ua.auth = 'ROLE_ADMIN'
      AND bp.community_id = #{communityId}
    ORDER BY bp.created_at DESC
    LIMIT #{limit}
  </select>

<!-- 모든 게시글 가져오기 -->
<select id="getAllPosts" resultMap="BoardPostResultMap">
  select *
  from board_post
  </select>




</mapper>
