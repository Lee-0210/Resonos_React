<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cosmus.resonos.mapper.community.CommunityMapper">

  <resultMap id="CommunityResultMap" type="com.cosmus.resonos.domain.community.Community">
      <id property="id" column="id"/>
      <result property="categoryId" column="category_id"/>
      <result property="creatorId" column="creator_id"/>
      <result property="name" column="name"/>
      <result property="description" column="description"/>
      <result property="createdAt" column="created_at"/>
      <result property="trackId" column="track_id"/>
      <result property="intro" column="intro"/>
      <!-- user 테이블의 nickname을 가져와서 creatorName에 매핑 -->
      <result property="creatorName" column="creator_name"/>

    <!-- 게시글 목록 -->
    <collection property="boardPosts" ofType="com.cosmus.resonos.domain.community.BoardPost">
        <id property="id" column="board_post_id"/>
        <result property="title" column="board_post_title"/>
        <result property="content" column="board_post_content"/>
        <result property="createdAt" column="board_post_created_at"/>
        <result property="userNickname" column="user_nickname"/>
    </collection>
  </resultMap>

  <select id="list" resultType="Community">
    SELECT * FROM community
  </select>

  <insert id="insert">
    INSERT INTO community (name, description, created_at, updated_at, track_id)
    VALUES (#{name}, #{description}, NOW(), NOW(), #{trackId})
    FROM community
  </insert>

  <update id="update">
    UPDATE community SET
      name = #{name},
      description = #{description},
      updated_at = NOW(),
      track_id = #{trackId}
    WHERE id = #{id}
    FROM community
  </update>

  <delete id="delete">
    DELETE FROM community WHERE id = #{id}
  </delete>

  <update id="completeAll">
    UPDATE community SET
      status = 'completed'
    WHERE status = 'in_progress'
  </update>

  <delete id="deleteAll">
    DELETE FROM community
  </delete>

  <!-- select  -->
  <select id="select" resultMap="CommunityResultMap">
      SELECT
          c.*,
          u.nickname AS creator_name
      FROM community c
      LEFT JOIN user u ON c.creator_id = u.id
      WHERE c.id = #{id}
  </select>

  <update id="setTrack">
    UPDATE community SET
      track_id = #{trackId}
    WHERE id = #{communityId}
  </update>

  <!-- 한줄 소개 설정 -->
  <update id="setIntro">
    UPDATE community SET
      intro = #{intro}
    WHERE id = #{communityId}
  </update>

  <select id="selectById" resultType="Community">
    SELECT * FROM community WHERE id = #{id}
  </select>

  <!-- 게시판 순위 Top5 - communityService -->
  <select id="getTopCommunities" resultMap="CommunityResultMap" parameterType="int">
    SELECT 
      c.*,
      bp.id AS board_post_id,
      bp.title AS board_post_title,
      bp.content AS board_post_content,
      bp.created_at AS board_post_created_at,
      u2.nickname AS user_nickname
    FROM community c
    LEFT JOIN user u ON u.id = c.creator_id
    LEFT JOIN board_post bp ON bp.community_id = c.id
    LEFT JOIN user u2 ON u2.id = bp.user_id
    ORDER BY bp.created_at DESC
    LIMIT #{limit}
  </select>


  <!-- 신설 게시판 - communityService -->
  <select id="getNewCommunities" resultType="Community">
    SELECT *
    FROM community
    ORDER BY created_at DESC
    LIMIT #{limit}
  </select>

  <!-- 모든 커뮤니티 조회 -->
  <select id="getAllCommunities" resultType="Community">
    SELECT *
    FROM community
  </select>

  <!-- 모든 커뮤니티 + 키워드 -->
  <select id="searchCommunities" resultMap="CommunityResultMap" parameterType="string">
    SELECT 
      c.id,
      c.category_id,
      c.creator_id,
      u.nickname AS creator_name,
      c.name,
      c.description,
      c.created_at,
      c.track_id,
      c.intro,
      bp.id AS board_post_id,
      bp.title AS board_post_title,
      bp.content AS board_post_content,
      bp.created_at AS board_post_created_at,
      u2.nickname AS user_nickname
    FROM community c
    LEFT JOIN user u ON u.id = c.creator_id
    LEFT JOIN board_post bp ON bp.community_id = c.id
    LEFT JOIN user u2 ON u2.id = bp.user_id
    <where>
      <if test="query != null and query.trim() != ''">
        c.name LIKE CONCAT('%', #{query}, '%')
      </if>
    </where>
    ORDER BY c.name ASC, c.created_at DESC
  </select>

  <!-- 키워드 기본 검색 -->
  <select id="searchCommunitiesBasic" resultMap="CommunityResultMap" parameterType="string">
    SELECT id, category_id, creator_id, name, description, created_at, track_id, intro
    FROM community
    <where>
      <if test="query != null and query.trim() != ''">
        name LIKE CONCAT('%', #{query}, '%')
      </if>
    </where>
    ORDER BY name ASC, created_at DESC  
  </select>






</mapper>